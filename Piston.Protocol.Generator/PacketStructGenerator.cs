using System.Text.Json;
using Microsoft.CodeAnalysis;

namespace Piston.Protocol.Generator;

[Generator]
public class PacketStructGenerator : ISourceGenerator
{
    private static readonly JsonSerializerOptions SerializerOptions = new()
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        DictionaryKeyPolicy = JsonNamingPolicy.CamelCase
    };

    private static readonly DiagnosticDescriptor JsonParsingError = new(
        "CODEGEN001", "Could not parse JSON file", "Could not parse \"Packets.json\" file", "PacketStructGenerator",
        DiagnosticSeverity.Error, true);
    
    public void Initialize(GeneratorInitializationContext context)
    {
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var packetListFile = context.AdditionalFiles.FirstOrDefault(file => Path.GetFileName(file.Path) == "Packets.json");
        if (packetListFile is null)
        {
            context.ReportDiagnostic(Diagnostic.Create(JsonParsingError, Location.None, Array.Empty<object>()));
            return;
        }
        
        var sourceText = packetListFile.GetText(context.CancellationToken);
        if (sourceText is null)
        {
            context.ReportDiagnostic(Diagnostic.Create(JsonParsingError, Location.None, Array.Empty<object>()));
            return;
        }
        
        var packetList = JsonSerializer.Deserialize<PacketList>(sourceText.ToString(), SerializerOptions);
        if (packetList is null)
        {
            context.ReportDiagnostic(Diagnostic.Create(JsonParsingError, Location.None, Array.Empty<object>()));
            return;
        }

        var allPackets = packetList.HandshakePackets!
            .Union(packetList.StatusPackets!)
            .Union(packetList.LoginPackets!)
            .Union(packetList.PlayPackets!);
        foreach (var definition in allPackets)
        {
            // TODO: Generate serialization and deserialization code for packet.
            context.AddSource($"{definition.Name}.g.cs", "// <auto-generated />");
        }
    }
}